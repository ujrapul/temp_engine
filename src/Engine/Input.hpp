#pragma once

#ifdef __APPLE__
#include <CoreGraphics/CGEvent.h>
#elif _WIN32
#include <winuser.h>
#endif

#include <string>
#include <array>
#include <vector>
#include <mutex>
#include <queue>

namespace Temp::Input
{
  enum class KeyboardCode : uint8_t
  {
#ifdef __linux__
    KB_A = 38,
    KB_B = 56,
    KB_C = 54,
    KB_D = 40,
    KB_E = 26,
    KB_F = 41,
    KB_G = 42,
    KB_H = 43,
    KB_I = 31,
    KB_J = 44,
    KB_K = 45,
    KB_L = 46,
    KB_M = 58,
    KB_N = 57,
    KB_O = 32,
    KB_P = 33,
    KB_Q = 24,
    KB_R = 27,
    KB_S = 39,
    KB_T = 28,
    KB_U = 30,
    KB_V = 55,
    KB_W = 25,
    KB_X = 53,
    KB_Y = 29,
    KB_Z = 52,
    KB_0 = 19,
    KB_1 = 10,
    KB_2 = 11,
    KB_3 = 12,
    KB_4 = 13,
    KB_5 = 14,
    KB_6 = 15,
    KB_7 = 16,
    KB_8 = 17,
    KB_9 = 18,
    KB_F1 = 67,
    KB_F2 = 68,
    KB_F3 = 69,
    KB_F4 = 70,
    KB_F5 = 71,
    KB_F6 = 72,
    KB_F7 = 73,
    KB_F8 = 74,
    KB_F9 = 75,
    KB_F10 = 76,
    KB_F11 = 95,
    KB_F12 = 96,
    KB_Escape = 9,
    KB_Tab = 23,
    KB_CapsLock = 66,
    KB_LeftShift = 50,
    KB_LeftCtrl = 37,
    KB_LeftAlt = 64,
    KB_Space = 65,
    KB_RightAlt = 108,
    KB_RightCtrl = 105,
    KB_RightShift = 62,
    KB_Enter = 36,
    KB_BackSpace = 22,
    KB_Insert = 118,
    KB_Delete = 119,
    KB_Home = 110,
    KB_End = 115,
    KB_PageUp = 112,
    KB_PageDown = 117,
    KB_LeftArrow = 113,
    KB_RightArrow = 114,
    KB_UpArrow = 111,
    KB_DownArrow = 116,
    KB_PrintScreen = 107,
    KB_Pause = 127,
    KB_ScrollLock = 78,
    KB_NumLock = 77,
    KB_KP_0 = 90,
    KB_KP_1 = 87,
    KB_KP_2 = 88,
    KB_KP_3 = 89,
    KB_KP_4 = 83,
    KB_KP_5 = 84,
    KB_KP_6 = 85,
    KB_KP_7 = 79,
    KB_KP_8 = 80,
    KB_KP_9 = 81,
    KB_KP_Add = 86,
    KB_KP_Subtract = 82,
    KB_KP_Multiply = 63,
    KB_KP_Divide = 106,
    KB_KP_Decimal = 91,
    KB_KP_Enter = 104,
    KB_Menu = 135,
    KB_Super_L = 133,
    KB_Super_R = 134,
    KB_Hyper_L = 136,
    KB_Hyper_R = 137,
    KB_Apostrophe = 48,
    KB_Comma = 59,
    KB_Minus = 20,
    KB_Period = 60,
    KB_Slash = 61,
    KB_Semicolon = 47,
    KB_Equal = 21,
    KB_LeftBracket = 34,
    KB_Backslash = 51,
    KB_RightBracket = 35,
    KB_GraveAccent = 49,
#elif __APPLE__
    KB_A = 0,
    KB_B = 11,
    KB_C = 8,
    KB_D = 2,
    KB_E = 14,
    KB_F = 3,
    KB_G = 5,
    KB_H = 4,
    KB_I = 34,
    KB_J = 38,
    KB_K = 40,
    KB_L = 37,
    KB_M = 46,
    KB_N = 45,
    KB_O = 31,
    KB_P = 35,
    KB_Q = 12,
    KB_R = 15,
    KB_S = 1,
    KB_T = 17,
    KB_U = 32,
    KB_V = 9,
    KB_W = 13,
    KB_X = 7,
    KB_Y = 16,
    KB_Z = 6,
    KB_0 = 29,
    KB_1 = 18,
    KB_2 = 19,
    KB_3 = 20,
    KB_4 = 21,
    KB_5 = 23,
    KB_6 = 22,
    KB_7 = 26,
    KB_8 = 28,
    KB_9 = 25,
    KB_F1 = 122,
    KB_F2 = 120,
    KB_F3 = 99,
    KB_F4 = 118,
    KB_F5 = 96,
    KB_F6 = 97,
    KB_F7 = 98,
    KB_F8 = 100,
    KB_F9 = 101,
    KB_F10 = 109,
    KB_F11 = 103,
    KB_F12 = 111,
    KB_Escape = 53,
    KB_Tab = 48,
    KB_CapsLock = 57,
    KB_LeftShift = 56,
    KB_LeftCtrl = 59,
    KB_LeftAlt = 58,
    KB_Space = 49,
    KB_RightAlt = 61,
    KB_RightCtrl = 62,
    KB_RightShift = 60,
    KB_Enter = 36,
    KB_BackSpace = 51,
    KB_Insert = 114,
    KB_Delete = 117,
    KB_Home = 115,
    KB_End = 119,
    KB_PageUp = 116,
    KB_PageDown = 121,
    KB_LeftArrow = 123,
    KB_RightArrow = 124,
    KB_UpArrow = 126,
    KB_DownArrow = 125,
    KB_PrintScreen = 0,
    KB_Pause = 0,
    KB_ScrollLock = 0,
    KB_NumLock = 0,
    KB_KP_0 = 82,
    KB_KP_1 = 83,
    KB_KP_2 = 84,
    KB_KP_3 = 85,
    KB_KP_4 = 86,
    KB_KP_5 = 87,
    KB_KP_6 = 88,
    KB_KP_7 = 89,
    KB_KP_8 = 91,
    KB_KP_9 = 92,
    KB_KP_Add = 69,
    KB_KP_Subtract = 78,
    KB_KP_Multiply = 67,
    KB_KP_Divide = 75,
    KB_KP_Decimal = 65,
    KB_KP_Enter = 76,
    KB_Menu = 110,
    KB_Super_L = 55,
    KB_Super_R = 54,
    KB_Hyper_L = 63,
    KB_Hyper_R = 0,
    KB_Apostrophe = 39,
    KB_Comma = 43,
    KB_Minus = 27,
    KB_Period = 47,
    KB_Slash = 44,
    KB_Semicolon = 41,
    KB_Equal = 24,
    KB_LeftBracket = 33,
    KB_Backslash = 42,
    KB_RightBracket = 30,
    KB_GraveAccent = 50,
#elif _WIN32
    KB_A = 65,
    KB_B = 66,
    KB_C = 67,
    KB_D = 68,
    KB_E = 69,
    KB_F = 70,
    KB_G = 71,
    KB_H = 72,
    KB_I = 73,
    KB_J = 74,
    KB_K = 75,
    KB_L = 76,
    KB_M = 77,
    KB_N = 78,
    KB_O = 79,
    KB_P = 80,
    KB_Q = 81,
    KB_R = 82,
    KB_S = 83,
    KB_T = 84,
    KB_U = 85,
    KB_V = 86,
    KB_W = 87,
    KB_X = 88,
    KB_Y = 89,
    KB_Z = 90,
    KB_0 = 48,
    KB_1 = 49,
    KB_2 = 50,
    KB_3 = 51,
    KB_4 = 52,
    KB_5 = 53,
    KB_6 = 54,
    KB_7 = 55,
    KB_8 = 56,
    KB_9 = 57,
    KB_F1 = 112,
    KB_F2 = 113,
    KB_F3 = 114,
    KB_F4 = 115,
    KB_F5 = 116,
    KB_F6 = 117,
    KB_F7 = 118,
    KB_F8 = 119,
    KB_F9 = 120,
    KB_F10 = 121,
    KB_F11 = 122,
    KB_F12 = 123,
    KB_Escape = 27,
    KB_Tab = 9,
    KB_CapsLock = 20,
    KB_LeftShift = 160,
    KB_LeftCtrl = 162,
    KB_LeftAlt = 164,
    KB_Space = 32,
    KB_RightAlt = 165,
    KB_RightCtrl = 163,
    KB_RightShift = 161,
    KB_Enter = 13,
    KB_BackSpace = 8,
    KB_Insert = 45,
    KB_Delete = 46,
    KB_Home = 36,
    KB_End = 35,
    KB_PageUp = 33,
    KB_PageDown = 34,
    KB_LeftArrow = 37,
    KB_RightArrow = 39,
    KB_UpArrow = 38,
    KB_DownArrow = 40,
    KB_PrintScreen = 44,
    KB_Pause = 19,
    KB_ScrollLock = 145,
    KB_NumLock = 144,
    KB_KP_0 = 96,
    KB_KP_1 = 97,
    KB_KP_2 = 98,
    KB_KP_3 = 99,
    KB_KP_4 = 100,
    KB_KP_5 = 101,
    KB_KP_6 = 102,
    KB_KP_7 = 103,
    KB_KP_8 = 104,
    KB_KP_9 = 105,
    KB_KP_Add = 107,
    KB_KP_Subtract = 109,
    KB_KP_Multiply = 106,
    KB_KP_Divide = 111,
    KB_KP_Decimal = 110,
    KB_KP_Enter = 13,
    KB_Menu = 93,
    KB_Super_L = 91,
    KB_Super_R = 92,
    KB_Hyper_L = 0,
    KB_Hyper_R = 0,
    KB_Apostrophe = 222,
    KB_Comma = 188,
    KB_Minus = 189,
    KB_Period = 190,
    KB_Slash = 191,
    KB_Semicolon = 186,
    KB_Equal = 187,
    KB_LeftBracket = 219,
    KB_Backslash = 220,
    KB_RightBracket = 221,
    KB_GraveAccent = 192,
#endif
    KB_MAX = 255
  };

  struct KeyQueue;

  struct KeyEventData
  {
    std::array<std::vector<void (*)(KeyboardCode)>, 256> keyEvents{};
    KeyQueue *keyQueue{nullptr};
  };

  std::string convertKeyCode(KeyboardCode keyCode, bool shift, bool caps);

#ifdef __APPLE__
  // The following method converts the key code returned by each keypress as
  // a human readable key code in const char format.
  CGEventRef CGEventCallback(CGEventTapProxy proxy, CGEventType type, CGEventRef event, void *data);
#endif

  [[nodiscard]] KeyEventData Construct();
  void Destruct(KeyEventData &data);

  void HandleThread(KeyEventData &data);
  void Process(KeyEventData &data);

#ifdef __linux__
  void PushKeyQueue(KeyboardCode keyCode, KeyEventData *data);
#endif

  void AddCallback(void (*Callback)(KeyboardCode), KeyEventData &data, KeyboardCode keyCode);
  void RemoveCallback(void (*Callback)(KeyboardCode), KeyEventData &data, KeyboardCode keyCode);
  void EndInput();
}
